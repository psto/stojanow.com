---
import { Image } from '@astrojs/image/components';
import { formatDate } from '~/utils';
const { TweetID } = Astro.props;

const BearerToken = import.meta.env.PUBLIC_TWITTER_BEARER_TOKEN;
const jsonURL1 = 'https://api.twitter.com/2/tweets?ids=';
const jsonURL2 =
  '&expansions=author_id,attachments.media_keys&tweet.fields=created_at,text,attachments,entities,source&user.fields=name,username,profile_image_url&media.fields=preview_image_url,type,url,alt_text';

const response = await fetch(jsonURL1 + TweetID + jsonURL2, {
  method: 'get',
  headers: {
    Authorization: `Bearer ${BearerToken}`,
  },
});
const Json = await response.json();
const JsonData = Json.data[0];
const JsonIncludes = Json.includes;

let text = '';
let created_at = '';
let profile_image_url = '';
let name = '';
let username = '';

name = JsonIncludes.users[0].name;
username = JsonIncludes.users[0].username;
profile_image_url = JsonIncludes.users[0].profile_image_url;
created_at = JsonData.created_at;

text = JsonData.text;

if (JsonData.entities?.urls) {
  JsonData.entities.urls.forEach((url) => {
    if (!url.images) {
      if (!url.unwound_url) {
        if (url.display_url.includes('buff.ly')) {
          text = text.replace(
            url.url,
            `<a href=${url.url} rel="noreferrer noopener">${url.display_url}</a>`,
          );
        } else {
          text = text.replace(url.url, ``);
        }
      } else {
        text = text.replace(
          url.url,
          `<a href=${url.url} rel="noreferrer noopener">${url.display_url}</a>`,
        );
      }
    } else {
      text = text.replace(
        url.url,
        `<a href=${url.url} rel="noreferrer noopener">${url.display_url}</a>`,
      );
    }
  });
}

if (JsonData.entities?.mentions) {
  JsonData.entities.mentions.forEach((mention) => {
    text = text.replace(
      `@${mention.username}`,
      `<a rel="noreferrer noopener" href="https://twitter.com/${mention.username}">@${mention.username}</a>`,
    );
  });
}

if (JsonData.entities?.hashtags) {
  JsonData.entities.hashtags.forEach((hashtag) => {
    text = text.replace(
      `#${hashtag.tag}`,
      `<a rel="noreferrer noopener" href="https://twitter.com/hashtag/${hashtag.tag}?src=hash&ref_src=twsrc">#${hashtag.tag}</a>`,
    );
  });
}

text = text.replace(/(?:\r\n|\r|\n)/g, '<br/>');

let imageItems = '';

if (JsonIncludes.media) {
  JsonIncludes.media.forEach((item) => {
    if (item.url) {
      imageItems = imageItems + `<img class="tweet-img" src=${item.url} alt="" /><br />`;
    }
  });
}
---

<div
  class="flex flex-col max-w-lg bg-white dark:bg-dark-light border border-gray-100 rounded m-0 p-0 dark:border-zinc-800"
>
  <div class="flex px-4 pt-4 items-center space-x-2">
    <a href={`https://twitter.com/${username}/status/${TweetID}`} rel="noreferrer noopener">
      <Image
        src={profile_image_url}
        alt={`Twitter avatar for ${username}`}
        width="48"
        aspectRatio="1:1"
        formats={['avif', 'webp']}
        class="h-10 w-10 m-0 rounded-full border border-gray-100 dark:border-zinc-800"
      />
    </a>
    <div>
      <a
        href={`https://twitter.com/${username}/status/${TweetID}`}
        rel="noreferrer noopener"
        class="no-underline"
        >{name}
      </a>

      <small>
        <a
          class="text-gray-400 dark:text-gray-400 no-underline text-sm"
          href={`https://twitter.com/${username}/status/${TweetID}`}
          rel="noreferrer noopener"
          >@{username}
        </a>
        <a
          href={`https://twitter.com/${username}/status/${TweetID}`}
          class="text-gray-400 dark:text-gray-400 no-underline"
          rel="noreferrer noopener"
          >{formatDate(new Date(created_at))}
        </a>
      </small>
    </div>
  </div>
  <p class="px-4 prose dark:prose-dark" set:html={text}></p>
  <span set:html={imageItems}></span>
</div>
